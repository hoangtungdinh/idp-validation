theory PolicyTheory: V{
{
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: take_off(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = low[:Type_S_battery].
}
{
    !t[Time]: land(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = lost[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: land(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: land(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = yes[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: land(t) <- S_pylon_inspection(t) = complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
}
{
    !t[Time]: go_to_landing_zone(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = lost[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: go_to_landing_zone(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: go_to_landing_zone(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = yes[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: go_to_landing_zone(t) <- S_pylon_inspection(t) = complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
}
{
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: manual_control(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = on[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: manual_control(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = on[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: manual_control(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = on[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
}
{
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: execute_mission_task(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
}
{
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification].
    !t[Time]: configure_mission(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_flying(t) = flying[:Type_S_flying] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification].
    !t[Time]: configure_mission(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_flying(t) = on_the_ground[:Type_S_flying] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = lost[:Type_S_communication] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: configure_mission(t) <- S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_abort_request(t) = yes[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: configure_mission(t) <- S_pylon_inspection(t) = complete[:Type_S_pylon_inspection] & S_mission_started(t) = yes[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_manual_control_request(t) = off[:Type_S_manual_control_request] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
}
{
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_pylon_inspection(t) = not_complete[:Type_S_pylon_inspection] & S_mission_started(t) = no[:Type_S_mission_started] & S_mission_abort_request(t) = no[:Type_S_mission_abort_request] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: wait_for_start(t) <- S_mission_started(t) = no[:Type_S_mission_started] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: wait_for_start(t) <- S_mission_started(t) = no[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
    !t[Time]: wait_for_start(t) <- S_mission_started(t) = no[:Type_S_mission_started] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_flying(t) = flying[:Type_S_flying].
}
{
    !t[Time]: notify_being_blocked(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: notify_being_blocked(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: notify_being_blocked(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: notify_being_blocked(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: notify_being_blocked(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
    !t[Time]: notify_being_blocked(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_being_blocked(t) = yes[:Type_S_being_blocked] & S_being_blocked_notification(t) = not_yet_notified[:Type_S_being_blocked_notification].
}
{
    !t[Time]: notify_communication_failure(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification].
    !t[Time]: notify_communication_failure(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification].
    !t[Time]: notify_communication_failure(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_communication_failure_notification(t) = not_yet_notified[:Type_S_communication_failure_notification].
}
{
    !t[Time]: notify_low_battery(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: notify_low_battery(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: notify_low_battery(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: notify_low_battery(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: notify_low_battery(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: notify_low_battery(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_low_battery_notification(t) = not_yet_notified[:Type_S_low_battery_notification] & S_battery(t) = low[:Type_S_battery].
}
{
    !t[Time]: notify_critical_battery(t) <- S_critical_battery_notification(t) = not_yet_notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: notify_critical_battery(t) <- S_critical_battery_notification(t) = not_yet_notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: notify_critical_battery(t) <- S_critical_battery_notification(t) = not_yet_notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: notify_critical_battery(t) <- S_critical_battery_notification(t) = not_yet_notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: notify_critical_battery(t) <- S_critical_battery_notification(t) = not_yet_notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: notify_critical_battery(t) <- S_critical_battery_notification(t) = not_yet_notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_battery(t) = critical[:Type_S_battery].
}
{
    !t[Time]: notify_obstacle_detection_failure(t) <- S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection].
    !t[Time]: notify_obstacle_detection_failure(t) <- S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection].
    !t[Time]: notify_obstacle_detection_failure(t) <- S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection].
    !t[Time]: notify_obstacle_detection_failure(t) <- S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection].
    !t[Time]: notify_obstacle_detection_failure(t) <- S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection].
    !t[Time]: notify_obstacle_detection_failure(t) <- S_obstacle_detection_failure_notification(t) = not_yet_notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = degraded[:Type_S_communication] & S_obstacle_detection(t) = lost[:Type_S_obstacle_detection].
}
{
    !t[Time]: reset_being_blocked_notification_status(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: reset_being_blocked_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
    !t[Time]: reset_being_blocked_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_being_blocked(t) = no[:Type_S_being_blocked] & S_being_blocked_notification(t) = notified[:Type_S_being_blocked_notification].
}
{
    !t[Time]: reset_communication_failure_notification_status(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification].
    !t[Time]: reset_communication_failure_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification].
    !t[Time]: reset_communication_failure_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_communication(t) = stable[:Type_S_communication] & S_communication_failure_notification(t) = notified[:Type_S_communication_failure_notification].
}
{
    !t[Time]: reset_low_battery_notification_status(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: reset_low_battery_notification_status(t) <- S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: reset_low_battery_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: reset_low_battery_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = critical[:Type_S_battery].
    !t[Time]: reset_low_battery_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: reset_low_battery_notification_status(t) <- S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_low_battery_notification(t) = notified[:Type_S_low_battery_notification] & S_battery(t) = critical[:Type_S_battery].
}
{
    !t[Time]: reset_critical_battery_notification_status(t) <- S_critical_battery_notification(t) = notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: reset_critical_battery_notification_status(t) <- S_critical_battery_notification(t) = notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: reset_critical_battery_notification_status(t) <- S_critical_battery_notification(t) = notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: reset_critical_battery_notification_status(t) <- S_critical_battery_notification(t) = notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_battery(t) = low[:Type_S_battery].
    !t[Time]: reset_critical_battery_notification_status(t) <- S_critical_battery_notification(t) = notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_battery(t) = ok[:Type_S_battery].
    !t[Time]: reset_critical_battery_notification_status(t) <- S_critical_battery_notification(t) = notified[:Type_S_critical_battery_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_battery(t) = low[:Type_S_battery].
}
{
    !t[Time]: reset_obstacle_detection_failure_notification_status(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = not_configured[:Type_S_mission_configuration] & S_at_landing_position(t) = unknown[:Type_S_at_landing_position] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection].
    !t[Time]: reset_obstacle_detection_failure_notification_status(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = yes[:Type_S_at_landing_position] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection].
    !t[Time]: reset_obstacle_detection_failure_notification_status(t) <- S_obstacle_detection_failure_notification(t) = notified[:Type_S_obstacle_detection_failure_notification] & S_mission_configuration(t) = configured[:Type_S_mission_configuration] & S_at_landing_position(t) = no[:Type_S_at_landing_position] & S_obstacle_detection(t) = stable[:Type_S_obstacle_detection].
}
}